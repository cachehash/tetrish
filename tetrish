#!/bin/bash
#disable all the posix features that make unquoted vars dangerous
set -f
IFS=
if [ ! -z "$ZSH_VERSION" ] ; then
	setopt sh_word_split
	#for some reason zsh was using a static seed for the randomness
	RANDOM=`shuf -i 0-10000 -n 1`
fi
ascii=1
for a in "$@"; do
	case "$a" in
	-A)
		ascii=1
	;;
	-a)
		ascii=0
	;;
	esac
done

ENDL='
'
MAX_FRAMESKIP=3
#if it takes this long or less to read input, assume it's
#coming from the buffer and we need to frame
#skip to catch up
MAX_BUFF_WAIT=10

UP='[A'
DOWN='[B'
LEFT='[D'
RIGHT='[C'

C_UP='OA'
C_DOWN='OB'
C_LEFT='OD'
C_RIGHT='OC'

LIGHT='[1m'
DARK='[2m'
CLEAR='[0m'

VOID='  '
if [ "$ascii" -eq 0 ] ; then
	BIT='ðŸ”³'
	BOT='â”€â”€'
	_J='â”˜'
	L_='â””'
	WALL='â”‚'
	CW=2
else 
	BIT='[]'
	BOT='--'
	_J=/
	L_=\\
	WALL='|'
	CW=2
fi

FALLING=
PREVIEW=$FALLING
LANDED=
GHOST=$LIGHT

W=10
H=24
T_SZ=4
paused=0

read_ch() {
	local IFS
	unset IFS
	if [ -t 0 ] ; then
		local read_ch_old=`stty -g`
		stty -icanon -echo
		eval "$1"'=$(dd bs=1 count=1 2>/dev/null)'
		stty $read_ch_old
	else
		eval "$1"'=$(dd bs=1 count=1 2>/dev/null)'
	fi
}

COLOR_PREFIX='[7m'
ORANGE=$COLOR_PREFIX'[33m'
RED=$LIGHT$COLOR_PREFIX'[31m'
GREEN=$LIGHT$COLOR_PREFIX'[32m'
YELLOW=$LIGHT$COLOR_PREFIX'[33m'
BLUE=$LIGHT$COLOR_PREFIX'[34m'
MAGENTA=$LIGHT$COLOR_PREFIX'[35m'
CYAN=$LIGHT$COLOR_PREFIX'[36m'

tetroni() {
	local x y z
	z=2
	x=0
	while [ "$x" -lt "$T_SZ" ] ; do
		y=0
		while [ "$y" -lt "$T_SZ" ] ; do
			eval 'tetroni_'$1_${x}_$y'=${'$z'}'
			z=`expr $z + 1`
			y=`expr $y + 1`
		done
		x=`expr $x + 1`
	done
}
numTetronis=7
numTetronisM1=6
#tetronis=( I J L O S T Z )
getRandom() {
	expr $RANDOM % $1
}
sleep() {
	command sleep "$1"
}
getRandTetroni() {
	r=`getRandom $numTetronisM1`
	case $r in
	0)
		echo I
	;;
	1)
		echo J
	;;
	2)
		echo L
	;;
	3)
		echo O
	;;
	4)
		echo S
	;;
	5)
		echo T
	;;
	6)
		echo Z
	;;
	esac
}
tetroni I \
	''	''	''	''	\
	"$CYAN"	"$CYAN"	"$CYAN"	"$CYAN"	\
	''	''	''	''	\
	''	''	''	''
tetroni J \
	''	''	''	''	\
	"$BLUE" ''	''	''	\
	"$BLUE"	"$BLUE"	"$BLUE"	''	\
	''	''	''	''
tetroni L \
	''		''		''		''	\
	''		''		"$ORANGE"	''	\
	"$ORANGE"	"$ORANGE"	"$ORANGE"	''	\
	''		''		''		''
tetroni O \
	''	''		''		''	\
	''	"$YELLOW"	"$YELLOW"	''	\
	''	"$YELLOW"	"$YELLOW"	''	\
	''	''		''		''
tetroni S \
	''		''		''		''	\
	''		"$GREEN"	"$GREEN"	''	\
	"$GREEN"	"$GREEN"	''		''	\
	''		''		''		''
tetroni T \
	''		''		''		''	\
	''		"$MAGENTA"	''		''	\
	"$MAGENTA"	"$MAGENTA"	"$MAGENTA"	''	\
	''		''		''		''
tetroni Z \
	''	''	''	''	\
	"$RED"	"$RED"	''	''	\
	''	"$RED"	"$RED"	''	\
	''	''	''	''
copyTetroni() {
	local x y
	x=0
	while [ "$x" -lt "$T_SZ" ] ; do
		y=0
		while [ "$y" -lt "$T_SZ" ] ; do
			eval 'tetroni_'${x}_$y'=$tetroni_'$1_${x}_$y
			y=$((y+1))
		done
		x=$((x+1))
	done
}
newTetroni() {
	copyTetroni "$next"
	next=`getRandTetroni`
	Tx=$((W/2-2))
	Ty=0
	if inBounds ; then :
	else
		display
		echo 'game over'
		exit
	fi
}

render() {
	local x y v line dx dy p bdy By
	y=$Ty
	bringDown
	By=$Ty
	Ty=$y

	w=`tput cols`
	h=`tput lines`
	unset lines
	y=0
	while [ "$y" -lt "$H" ] ; do
		line=$WALL
		x=0
		while [ "$x" -lt "$W" ] ; do
			eval 'v=$GRID_'${x}_$y
			dx=$((x-Tx))
			dy=$((y-Ty))
			bdy=$((y-By))
			if [ 0 -le "$dx" ] && [ "$dx" -lt "$T_SZ" ] && [ 0 -le "$dy" ] && [ "$dy" -lt "$T_SZ" ] && eval '[ "$tetroni_'${dx}_$dy'" != "" ]' ; then
				eval 'v=$FALLING$tetroni_'${dx}_$dy
				p=$BIT
			elif [ 0 -le "$dx" ] && [ "$dx" -lt "$T_SZ" ] && [ 0 -le "$bdy" ] && [ "$bdy" -lt "$T_SZ" ] && eval '[ "$tetroni_'${dx}_$bdy'" != "" ]' ; then
				v=$GHOST
				p=$BIT
			else
				if [ "$v" = "" ] ; then
					p=$VOID
				else
					p=$BIT
				fi
			fi
			if [ "$paused" = 1 ] ; then
				v=
			fi
			line=$line$v$p$CLEAR
		x=$((x+1))
		done
		line=$line$WALL
		if [ "$y" -lt "$T_SZ" ] ; then
			x=0
			while [ "$x" -lt "$T_SZ" ] ; do
				eval 'v=$tetroni_'"${next}_${x}_$y"
				if [ "$v" = "" ] ; then
					p=$VOID
				else
					p=$BIT
				fi
				if [ "$paused" = 1 ] ; then
					v=
				fi
				line=$line$PREVIEW$v$p$CLEAR
			x=$((x+1))
			done
		fi
		lines=$lines$line$ENDL
	y=$((y+1))
	done
	line=$L_
	x=0
	while [ "$x" -lt "$W" ] ; do
		line=$line$BOT
		x=$((x+1))
	done
	lines=$lines$line$_J
}
draw() {
	local showed=0
	local IFS=$ENDL
	local start=$(((w-W*CW)/2))
	for l in $lines ; do
		if [ "$showed" = 0 ] ; then
			printf %"$start"d "$score"00
			showed=1
		else
			printf %"$start"s ''
		fi
		printf '%s\n' "$l"
	done
}
display() {
	render
	tput cuu $((H+1))
	draw
}
fall() {
	if slide 0 1 ; then :
	else
		land
	fi
}
land() {
	local dy dx x y
	dx=$((x-Tx))
	dy=$((y-Ty))
	dx=0
	while [ "$dx" -lt "$T_SZ" ] ; do
		dy=0
		while [ "$dy" -lt "$T_SZ" ] ; do
			x=$((dx+Tx))
			y=$((dy+Ty))
			eval 'v=$tetroni_'${dx}_$dy
			if [ "$v" != '' ] ; then
				#GRID[x+y*W]=$v
				eval "GRID_${x}_$y="'$v'
			fi
			dy=$((dy+1))
		done
		dx=$((dx+1))
	done
	newTetroni
	checkMatch
}
checkMatch() {
	local x y dy dx matches s
	matches=0
	s=1
	dy=$((H-1))
	y=$dy
	while [ "$y" -ge 0 ] ; do
		rowMatch=1
		x=0
		while [ "$x" -lt "$W" ] ; do
			if [ "$y" != "$dy" ] ; then
				eval "GRID_${x}_$dy="'$GRID_'"${x}_$y"
				eval "GRID_${x}_$y="
			fi
			if eval '[ "$GRID_'${x}_$dy'" = "" ]' ; then
				rowMatch=0
			fi
			x=$((x+1))
		done
		if [ "$rowMatch" -ne 1 ] ; then
			dy=$((dy-1))
		else
			matches=$((matches+1))
		fi
		y=$((y-1))
	done
	if [ "$matches" -ne 0 ] ; then
		while [ "$matches" -gt 1 ] ; do
			s=$((s*2))
			matches=$((matches-1))
		done
		score=$((score + s))
	fi
}
inBounds() {
	local dy dx x y v
	dx=0
	while [ "$dx" -lt "$T_SZ" ] ; do
		dy=0
		while [ "$dy" -lt "$T_SZ" ] ; do
			x=$((dx+Tx))
			y=$((dy+Ty))
			eval 'v=$tetroni_'${dx}_$dy
			if [ "$v" != '' ] ; then
				if [ "$x" -lt 0 ] || [ "$x" -ge "$W" ] || [ "$y" -lt 0 ] || [ "$y" -ge "$H" ] || eval '[ "$GRID_'${x}_$y'" != "" ]' ; then
					return 1
				fi
			fi
			dy=$((dy+1))
		done
		dx=$((dx+1))
	done
	return 0
}
slide() {
	local dx=$1
	local dy=$2
	Tx=$((Tx+dx))
	Ty=$((Ty+dy))
	if inBounds ; then :
	else
		Tx=$((Tx-dx))
		Ty=$((Ty-dy))
		return 1
	fi
	return 0
}
bringDown() {
	while slide 0 1 ; do
		:
	done
}
rotate() {
	forceRotate $1
	if inBounds ; then :
	else
		forceRotate $((0-$1))
	fi
}
forceRotate() {
	local csz=$T_SZ
	local s=$((csz-1))
	local half=$(((csz+1)/2))
	local hsz=$((csz/2))
	local x y i pval val ox oy
	x=0
	while [ "$x" -lt "$half" ] ; do
		y=0
		while [ "$y" -lt "$hsz" ] ; do
			eval 'val=$tetroni_'${x}_$y
			for i in 0 1 2 3 ; do
				if [ "$1" -ge 1 ] ; then
					oy=$y
					y=$x
					x=$((s-oy))
				else
					ox=$x
					x=$y
					y=$((s-ox))
				fi
				eval 'pval=$tetroni_'${x}_$y
				eval 'tetroni_'${x}_$y'=$val'
				val=$pval
			done
			y=$((y+1))
		done
		x=$((x+1))
	done
}
togglePause() {
	local obit
	if [ "$paused" = 0 ] ; then
		paused=1
		obit=$BIT
		BIT=$VOID
		display
		BIT=$obit
	else
		paused=0
		display
	fi
}
next=`getRandTetroni`
newTetroni
render
draw
IFS=
(
	while sleep .5 ; do
		printf j
		#printf $'\a' >&2
	done &
	while read_ch p; do 
		if [ "$p" = '' ] ; then
			read_ch ap
			p=$p$ap
			read_ch ap
			p=$p$ap
		fi
		case "$p" in
		h|"$LEFT")
			printf h
		;;
		j|"$DOWN")
			printf j
		;;
		k|"$UP"|"$C_RIGHT")
			printf k
		;;
		r|"$C_UP"|"$C_LEFT")
			printf r
		;;
		l|$RIGHT)
			printf l
		;;
		' '|"$C_DOWN")
			printf G
		;;
		p)
			printf p
		;;
		esac
	done 
) | while read_ch p; do
	#assume that if the delay was less than 100 ms we
	#read input from buffer and therefore need to 
	#frameskip
	skip=0
	#if ((`date +%s%3N` - date < MIN_BUFF_WAIT)) ; then
	#	skip=1
	#else
	#	skip=0
	#fi
	if [ "$paused" = 1 ] ; then
		if [ "$p" = p ] ; then
			togglePause
		fi
	else
		case "$p" in
		h)
			slide -1 0
		;;
		j)
			fall
		;;
		k)
			rotate 1
		;;
		l)
			slide 1 0
		;;
		G)
			bringDown
		;;
		r)
			rotate -1
		;;
		p)
			togglePause
		;;
		esac
	fi
	if [ "$skip" = 1 ] && [ "$fs" -lt "$MAX_FRAMESKIP" ] ; then
		fs=$((fs+1))
	else
		if [ "$paused" = 0 ] ; then
			display
		fi
		fs=0
	fi
	date=`date +%s%3N`
done
